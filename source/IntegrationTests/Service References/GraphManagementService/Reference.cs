//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IntegrationTests.GraphManagementService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GraphManagementService.IGraphManagementService")]
    public interface IGraphManagementService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraphManagementService/SyncGraphNode", ReplyAction="http://tempuri.org/IGraphManagementService/SyncGraphNodeResponse")]
        void SyncGraphNode(GraphServices.DTO.GraphNode node);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraphManagementService/SyncGraphNode", ReplyAction="http://tempuri.org/IGraphManagementService/SyncGraphNodeResponse")]
        System.Threading.Tasks.Task SyncGraphNodeAsync(GraphServices.DTO.GraphNode node);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraphManagementService/InvalidateAllGraphNodes", ReplyAction="http://tempuri.org/IGraphManagementService/InvalidateAllGraphNodesResponse")]
        void InvalidateAllGraphNodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraphManagementService/InvalidateAllGraphNodes", ReplyAction="http://tempuri.org/IGraphManagementService/InvalidateAllGraphNodesResponse")]
        System.Threading.Tasks.Task InvalidateAllGraphNodesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraphManagementService/DeleteAllInvalidGraphNodes", ReplyAction="http://tempuri.org/IGraphManagementService/DeleteAllInvalidGraphNodesResponse")]
        void DeleteAllInvalidGraphNodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraphManagementService/DeleteAllInvalidGraphNodes", ReplyAction="http://tempuri.org/IGraphManagementService/DeleteAllInvalidGraphNodesResponse")]
        System.Threading.Tasks.Task DeleteAllInvalidGraphNodesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraphManagementService/NormalizeRelations", ReplyAction="http://tempuri.org/IGraphManagementService/NormalizeRelationsResponse")]
        void NormalizeRelations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraphManagementService/NormalizeRelations", ReplyAction="http://tempuri.org/IGraphManagementService/NormalizeRelationsResponse")]
        System.Threading.Tasks.Task NormalizeRelationsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGraphManagementServiceChannel : IntegrationTests.GraphManagementService.IGraphManagementService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GraphManagementServiceClient : System.ServiceModel.ClientBase<IntegrationTests.GraphManagementService.IGraphManagementService>, IntegrationTests.GraphManagementService.IGraphManagementService {
        
        public GraphManagementServiceClient() {
        }
        
        public GraphManagementServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GraphManagementServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GraphManagementServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GraphManagementServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SyncGraphNode(GraphServices.DTO.GraphNode node) {
            base.Channel.SyncGraphNode(node);
        }
        
        public System.Threading.Tasks.Task SyncGraphNodeAsync(GraphServices.DTO.GraphNode node) {
            return base.Channel.SyncGraphNodeAsync(node);
        }
        
        public void InvalidateAllGraphNodes() {
            base.Channel.InvalidateAllGraphNodes();
        }
        
        public System.Threading.Tasks.Task InvalidateAllGraphNodesAsync() {
            return base.Channel.InvalidateAllGraphNodesAsync();
        }
        
        public void DeleteAllInvalidGraphNodes() {
            base.Channel.DeleteAllInvalidGraphNodes();
        }
        
        public System.Threading.Tasks.Task DeleteAllInvalidGraphNodesAsync() {
            return base.Channel.DeleteAllInvalidGraphNodesAsync();
        }
        
        public void NormalizeRelations() {
            base.Channel.NormalizeRelations();
        }
        
        public System.Threading.Tasks.Task NormalizeRelationsAsync() {
            return base.Channel.NormalizeRelationsAsync();
        }
    }
}
